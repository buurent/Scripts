--- list databases
select datname,datacl from pg_database;
 
-- List Schemas
select nspname from pg_catalog.pg_namespace;
 
-- List User Roles
select usename as username from pg_user;
 
 -- List Group Roles
select distinct rolname as group_role from pg_roles join pg_auth_members on (pg_roles.oid=pg_auth_members.roleid);

-- Role Resource Queue Mapping
select * from gp_resq_role ;

- Check activity
select usename,sess_id,query_start,now()-query_start as elapsed,procpid,
substr(current_query,1,30),waiting 
from pg_stat_activity 
where current_query not like '<IDLE>'
order by 4 desc;

--check_user_activity_by_database
select datname,usename,count(*) from pg_catalog.pg_stat_activity group by datname,usename order by datname,usename;

-- Check sessins started and idle for more than 30 minutes
select * from pg_stat_activity where current_query like '<IDLE>' and backend_start<now()-interval '30 minutes';

-- Check Waiting Session
select usename,sess_id,query_start,now()-query_start as elapsed,current_query,
waiting from pg_stat_activity
where waiting 
order by 4 desc;

-- Check spill size per query
select procpid,sum(size)/power(1024,3),avg(size)/power(1024,3) from gp_toolkit.gp_workfile_usage_per_query  group by procpid;

-- Check spill size per segment
select * from gp_toolkit.gp_workfile_usage_per_segment;

-- Check storage utilization per segment server
\c gpperfmon
select ctime,hostname,filesystem,pg_size_pretty(total_bytes) as total_bytes,pg_size_pretty(bytes_used) as used_bytes, pg_size_pretty(bytes_available) as avail_bytes, (round((bytes_used * 100)/total_bytes::numeric,2))||'%' as pct_used from diskspace_now order by hostname,filesystem, (round((bytes_used * 100)/total_bytes::numeric,2)) desc;

-- Disk Space Availability
select total_gb,used_gb, available_gb, round((used_gb*100)/total_gb::numeric,2)||'%' as pct_used, round((available_gb*100)/total_gb::numeric,2)||'%' as pct_available from
(
select
       sum(round((bytes_used / power(1024,3))::numeric,2)) as used_gb,
       sum(round((bytes_available / power(1024,3))::numeric,2)) as available_gb,
       sum(round((total_bytes / power(1024,3))::numeric,2)) as total_gb
from
(
select date_trunc('hour', ctime) ctime_hour,
       to_char(ctime, 'Month') as "month",
       to_char(ctime, 'ddd') as "day",
       to_char(ctime, 'Day') as weekday,
       to_char(ctime, 'hh24') as "hour",
       hostname,
       filesystem,
       bytes_used,
       bytes_available,
       total_bytes,
       row_number() over (partition by to_char(ctime, 'ddd'), hostname order by total_bytes desc) space_used_rank
from   diskspace_now
where filesystem in ('/data1','/data2')
and   hostname like 'sdw%' 
) a
where space_used_rank = 1
group by day
) as b;


-- Database Size
select datname, pg_size_pretty(pg_database_size(datname)) as size from pg_database;

-- Schema Size
select sosdnsp as SchemaName, 
round(sosdschematablesize/power(1024,3)::numeric,2) as "Table Size (GB)" ,
round(sosdschemaidxsize/power(1024,3)::numeric,2) as "Indx Size GB (GB)",
round((sosdschematablesize + sosdschemaidxsize)/power(1024,3)::numeric,2) as "Total Schema Size (GB)" 
from gp_toolkit.gp_size_of_schema_disk
order by 4 desc
;

-- Table Size
select pg_size_pretty(pg_total_relation_size('public.sales'));

-- Resource Queues in your database
select pg_resqueue.oid, rsqname from pg_catalog.pg_resqueue;

-- Resource Queue Parameter Settings
select * from pg_catalog.pg_resqueue_attributes;

-- Resource Queue and no assigned roles/users
select a.rsqname as "RQname", 
        (select ressetting from pg_resqueue_attributes b 
         where a.rsqname=b.rsqname and resname='active_statements') as "ActiveStatment",
        (select ressetting from pg_resqueue_attributes b 
         where a.rsqname=b.rsqname and resname='max_cost') as "MaxCost",
        (select ressetting from pg_resqueue_attributes b 
         where a.rsqname=b.rsqname and resname='min_cost') as "MinCost",
        (select ressetting from pg_resqueue_attributes b 
         where a.rsqname=b.rsqname and resname='cost_overcommit') as "CostOvercommit",
        (select ressetting from pg_resqueue_attributes b 
         where a.rsqname=b.rsqname and resname='memory_limit') as "MemoryLimit",
        (select ressetting from pg_resqueue_attributes b 
         where a.rsqname=b.rsqname and resname='priority') as "Priority",
        (select count(*) from pg_resqueue x,pg_roles y 
         where x.oid=y.rolresqueue and a.rsqname=x.rsqname) as "RQAssignedUsers"
from ( select distinct rsqname from pg_resqueue_attributes ) a
order by 1;

-- Resource Queue assigned to Group roles. Information purpose only - Group role resource queue not enforced
select rrrsqname rqname ,rrrolname as username 
from gp_toolkit.gp_resq_role 
where rrrolname in (select distinct rolname as group_role from pg_roles join pg_auth_members on (pg_roles.oid=pg_auth_members.roleid));

-- Viewing the Roles Assigned to a Resource Queue
SELECT rolname, rsqname 
FROM pg_roles, gp_toolkit.gp_resqueue_status 
WHERE pg_roles.rolresqueue=gp_toolkit.gp_resqueue_status.queueid;

-- Viewing the Waiting Queries for a Resource Queue
SELECT * FROM gp_toolkit.gp_locks_on_resqueue WHERE lorwaiting='true';

-- Check DCA CPU and Memory Utilization (last minutes)

\c gpperfmon
select date_trunc('minutes', ctime) ctime,
       round(max(cpu_sys)::numeric,2) as maxcpusys,
       round(max(cpu_user)::numeric,2) as maxcpuuser,
       round(max(cpu_idle)::numeric,2) as maxcpuidle,
       round(avg(cpu_sys)::numeric,2) as avgcpusys,
       round(avg(cpu_user)::numeric,2) as avgcpuuser,
       round(avg(cpu_idle)::numeric,2) as avgcpuidle,
       round(avg(mem_actual_used)/power(1024,3)::numeric,2) avgmemgb,
       round(min(mem_actual_used)/power(1024,3)::numeric,2) minmemgb,
       round(max(mem_actual_used)/power(1024,3)::numeric,2) maxmemgb
from   system_history
where ctime >=current_timestamp - interval '60 minutes'
group by date_trunc('minutes', ctime)
order by 1 desc;

\c gpperfmon
select date_trunc('minutes', ctime) ctime_minutes,
       round(avg(disk_rb_rate)/power(1024,1)::numeric,2) avgdiskreadpersec_kb,
       round(avg(disk_wb_rate)/power(1024,1)::numeric,2) avgdiskwritepersec_kb,
       round(avg(disk_ro_rate)::numeric,2) avgdiskreadoppersec,
       round(avg(disk_wo_rate)::numeric,2) avgdiskwriteoppersec
from   system_history
where ctime >=current_timestamp - interval '60 minutes'
group by date_trunc('minutes', ctime)
order by 1 desc;

-- Check DCA network R/W Activity

\c gpperfmon
select date_trunc('minutes', ctime) ctime_minutes,
       round(avg(net_rb_rate)::numeric,2) avgnetrbps,
       round(avg(net_wb_rate)::numeric,2) avgnetwb,
       round(avg(net_rp_rate)::numeric,2) avgpacketpersecforro,
       round(avg(net_wb_rate)::numeric,2) avgpacketpersecforwo
from   system_history
where ctime >=current_timestamp - interval '60 minutes'
group by date_trunc('minutes', ctime)
order by 1 desc;

-- Check load and SWAP activity

\c gpperfmon
select date_trunc('minutes', ctime) ctime_minutes,
       round(avg(load0)::numeric,2) as cpuavgload1minute,
       round(avg(load1)::numeric,2) as cpuavgload5minute,
       round(avg(load2)::numeric,2) as cpuavgload15minute,
       round(avg(swap_used)/power(1024,3)::numeric,2) avgswapgb,
       round(min(swap_used)/power(1024,3)::numeric,2) minswapgb,
       round(max(swap_used)/power(1024,3)::numeric,2) maxswapdgb
from   system_history
where ctime >=current_timestamp - interval '60 minutes'
group by date_trunc('minutes', ctime)
order by 1 desc;

-- Longest running SQL

select
    datname as "Db name",
    usename as "User name",
    procpid as "Pid",    
    sess_id as "SessionID",
    waiting as "Waiting",
    client_addr as "client Addr",
    application_name as "App Name",
    now() - query_start as "Duration",
    substring(current_query,1,40) as "Current Query"
from pg_stat_activity
where current_query!='<IDLE>'
order by "Duration" desc;

-- Check top 25 largest table (in size) in GPDB

select soatischemaname as schemaname,
soatitablename as tablename,
round(max(soatisize)/power(1024,3)::integer,3) sizeGB 
from gp_toolkit.gp_size_of_all_table_indexes 
group by soatischemaname,soatitablename
 order by 3 desc 
limit 25;

-- Checking contentions in GPDB Database

SELECT locktype, database, c.relname, l.relation, 
l.transactionid, l.transaction, l.pid, l.mode, l.granted, 
substr(a.current_query,1,30) 
        FROM pg_locks l, pg_class c, pg_stat_activity a 
        WHERE l.relation=c.oid AND l.pid=a.procpid 
        ORDER BY c.relname;
        
-- Checking distribution keys

SELECT pgn.nspname as schemaname, 
pgc.relname as tablename, 
pga.attname  as distributionkey
FROM (SELECT gdp.localoid, 
CASE 
WHEN ( Array_upper(gdp.attrnums, 1) > 0 ) THEN 
Unnest(gdp.attrnums) 
ELSE NULL 
END AS attnum 
FROM gp_distribution_policy gdp 
ORDER BY gdp.localoid) AS distrokey 
INNER JOIN pg_class AS pgc 
ON distrokey.localoid = pgc.oid 
INNER JOIN pg_namespace pgn 
ON pgc.relnamespace = pgn.oid 
LEFT OUTER JOIN pg_attribute pga 
ON distrokey.attnum = pga.attnum 
AND distrokey.localoid = pga.attrelid 
ORDER BY pgn.nspname, 
pgc.relname;

-- check locks

SELECT usename,COUNT(DISTINCT pid) 
FROM pg_locks l JOIN pg_stat_activity a ON (a.procpid=l.pid) 
WHERE l.granted IS FALSE 
GROUP BY 1 ORDER BY 
count DESC;

SELECT * from pg_locks 
where pid in (select procpid from pg_stat_activity 
where current_query not like '<IDLE>') 
and not granted;

--check_current_activity
-- select * from pg_stat_activity;
SELECT datid, datname, procpid, sess_id, usesysid, usename, waiting, query_start, backend_start, xact_start, application_name, current_query FROM pg_stat_activity ;

 --check_user_activity_by_database
select datname,usename,count(*) from pg_catalog.pg_stat_activity group by datname,usename order by datname,usename;

 -- Check sessins started and idle for more than 60 minutes
select * from pg_stat_activity where substring(current_query,2,4)='IDLE' and backend_start<now()-interval '1 hour';

-- For last 30 minutes excluding gpadmin and gpmon

select logsession,logtime,loguser,logmessage
from gp_toolkit.__gp_log_master_ext 
where logtime>current_timestamp-interval '30 minutes' 
and loguser not like 'gp%' limit 2;

-- For a specific user name

select logsession,logtime,loguser,logmessage 
from gp_toolkit.__gp_log_master_ext 
where logtime>current_timestamp-interval '30 minutes' 
and lower(loguser) ='<username>';

-- For list of user name

select logsession,logtime,loguser,logmessage 
from gp_toolkit.__gp_log_master_ext 
where logtime>current_timestamp-interval '30 minutes' 
and loguser in ('<username1>', '<username2>');

-- For specific session is

select logsession,logtime,loguser,logmessage 
from gp_toolkit.__gp_log_master_ext 
where logtime>current_timestamp-interval '30 minutes' 
and  logsession='con<session id>' ;

--For a specific message

select logsession,logtime,loguser,logmessage
from gp_toolkit.__gp_log_master_ext 
where logtime>current_timestamp-interval '30 minutes' 
and upper(logmessage) like '%SELECT%' limit 2;

-- Check today's log

select logtime,loguser,logmessage from gp_toolkit.__gp_log_master_ext where logtime>date_trunc('day',current_timestamp) 
and loguser not in ('list of users') 
order by logtime;

-- TOP 25 ETL 
\c gpperfmon
\x
\t
select tfinish-tstart as elapsed,username,rsqname,query_text 
from queries_history 
where upper(substr(query_text,1,20)) like '%INSERT%' 
and ctime>'2016-01-01' order by 1 desc 
limit 25 ;

select tfinish-tstart as elapsed,username,rsqname,substr(query_text,1,20) as query_text 
from queries_history 
where upper(substr(query_text,1,20)) like '%INSERT%' 
and ctime>'2016-01-01' 
order by 1 desc limit 25 ;

--Top 25 BOE

\c gpperfmon
\x
\t
select tfinish-tstart as elapsed,username,rsqname,query_text 
from queries_history 
where upper(substr(query_text,1,20)) like '%SELECT%' 
and ctime>'2016-01-01' order by 1 desc 
limit 25 ;

select tfinish-tstart as elapsed,username,rsqname,substr(query_text,1,20) as query_text 
from queries_history 
where upper(substr(query_text,1,20)) like '%SELECT%' 
and ctime>'2016-01-01' 
order by 1 desc limit 25 ;

-- Check last analyze
select objname,actionname,max(statime) from pg_stat_operations 
where schemaname||'.'||objname='<schemaname.tablename>' 
group by objname,actionname
order by 3 asc;;

-- Check actual table row count and stats used in plan
select count(*) from schemaname.tablename;
select reltuples::bigint from pg_class c join pg_namespace n on n.oid=relnamespace 
where nspname||'.'||relname='<schemaname.tablename>';

-- Check table skew
select gp_segment_id,count(1) from schemaname.tablename group by 1 order by 1;

SELECT COUNT(*), gp_segment_id FROM <table-name> GROUP BY gp_segment_id;

SELECT 'facts' as "Table Name",max(c) as "Max Seg Rows", min(c) as "Min Seg Rows",
(max(c)-min(c))*100.0/max(c) as "Percentage Difference Between Max & Min"
from (SELECT count(*) c, gp_segment_id from facts group by 2) as a;

-- show parameters

$psql -c 'SHOW ALL;'

select category,name,setting,unit,context,source,min_val,max_val,short_desc,extra_desc
from pg_settings
order by category;


